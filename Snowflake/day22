----------------------------------- Internal & External Tables in Snowflake ---------------------------------------
/*
=============================INTERNAL TABLES====================================

==============================================================================
                   TYPES OF TABLES  - 1. PERMANENT TABLE  2. TRANSIENT TABLE  3. TEMPORARY TABLE
=============================================================================
*/

-- creating a schema 
create or replace schema table_types;                          
                          
-- Where to see table type
SHOW TABLES in SCHEMA public;

-- creating permanent, transient, temporary table 
create or replace table permanent_table(id number);
CREATE OR REPLACE TRANSIENT TABLE tran_table(id number);
CREATE OR REPLACE TEMPORARY TABLE temp_table(id number);

-- Where to see table type
SHOW TABLES in SCHEMA table_types;
-- In the result, see the 'kind' column to see the table types


-------------------------- PERMANENT Tables/Schemas ---------------------------

create or replace table permanent_table(id number);   -- it's just normal table we create

-- Default table type in Snowflake
-- These are the regular and common tables
-- Tables exist until we drop them explicitly
-- Time travel retention period is 0-90 days, depending on Snowflake edition
-- 7 days of fail-safe period


--------------------------------- Transient Tables/Schemas -------------------------------

-- Similar to Permanent tables but with 1 1-day retention period
-- No fail-safe period
-- Tables exist until we drop them explicitly
-- Useful when data protection is not required
-- Defining stage tables as Transient is best practice 


-- creating a transient table
create or replace table tran_table(id number);

-- create transient schema 
create or replace transient schema tran_schema;   -- all tables in the transient schema will be transient by default

-- syntax for creating a transient table
create or replace table tran_schema.tran_table(id number);

SHOW TABLES in SCHEMA tran_schema;

-- Can we alter the retention period of transient tables?
alter table tran_schema.tran_table
set data_retention_time_in_days = 2 ; 

-- Can we undrop the table, sc, DB transient in 24 hours?
use database snow_db;
drop table tran_schema.tran_table;

-- undrop this transient table within 24 hours
undrop table tran_schema.tran_table;

drop schema tran_schema;
undrop schema tran_schema;

-------------------------------------- Temporary Tables ----------------------------

-- Table exists only within the session
-- Once the session ends, the table gets dropped completely and is not recoverable.
-- They are not visible to other users or sessions
-- 1-day retention period
-- No fail-safe period
-- Useful for development work
-- Can be used in stored procedures for intermediate data storage

-- Syntax :
    CREATE OR REPLACE TEMPORARY TABLE temp_table(id number);

-- creating a schema ----- NO 
    create or replace temporary schema temp_schema ;

-- creating a database ----- NO 
    create or replace temporary database temp_db ;

-- create 1 table 
create or replace temporary table temp_table (id number);

insert into temp_table values ('5');
insert into temp_table values ('4');
insert into temp_table values ('8');
insert into temp_table values ('1');

select * from temp_table;  -- temp table will only be assessed from 1 session ( worksheet )

-- drop and undrop

drop table temp_table;

undrop table temp_table;

desc table temp_table;

--------------------------------------SCENARIO 1-----------------------------------------------------------------

create or replace temporary table temp_table (id number);

alter table temp_table rename to temp_tables;

undrop table temp_table;

select * from temp_table;

---------------------------------------SCENARIO 2------------------------------------------------------------------

create or replace temporary table names1 (name string);

create or replace table names1 (name string);

insert into names1 values ('shivam');
insert into names1 values ('ayushi');
insert into names1 values ('elvish');
insert into names1 values ('pranav');

select * from names1;

show tables in schema table_types;
------------------------------ POINTS TO REMEMBER ------------------------------

-- We can't convert any table to another type
-- We can create Transient databases and Transient schemas
-- Tables created under Transient databases/schemas are by default Transient
-- We can create a temporary table with the same name as the Perm/Tran table. If we query with that table name, 
--  It fetches data from the Temporary table in that session.

-- How to find the table type?
-- Look at the Kind' filed in SHOW TABLES properties

-- for schema type, we have to OPTIONS column 
show schemas in database snow_db;



-----------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------ EXTERNAL TABLES ------------------------------------------
/*               
-- Snowflake External tables allow you to query the files stored in the external stage like a regular table,
   That means without moving that data from files to Snowflake tables.
-- External tables access the files stored in external stage areas such as Amazon S3, GCP bucket, or Azure blob storage.
-- External tables store metadata about these data files, such as value(complete record), the filename, and the file row number.
-- External tables are read-only; therefore, no DML operations can be performed on them, but we can use external tables for query     and join operations.
-- Views and materialized views can be created against external tables.
-- Querying data from external tables is likely slower than querying database tables.
-- The advantage of an external table is that you can analyze the data without storing it in Snowflake.                   
-- We will see how to create external tables on stages using internal and external stages.
*/



------------------ From External stages (Amazon S3 cloud) ---------------------------

use database snow_db;

-- Create a schema for External Tables
CREATE or replace schema ext_tble;

-- Create file format object
CREATE OR REPLACE FILE FORMAT csv_ff
    type = csv
    field_delimiter = ','
    skip_header = 1
    empty_field_as_null = TRUE;
    

-- Create storage integration object
-- only account admins can create INTEGRATION objects
create or replace storage integration external_table_integration
    type = external_stage
    storage_provider = s3
    enabled = TRUE
    storage_aws_role_arn = 'arn:aws:iam::510593089103:role/snowflake_learning'
    storage_allowed_locations = ('s3://s-3-buck-et/csv_folder/')
    comment = 'Integration with AWS S3 buckets'; 

-- List all integrations
SHOW STORAGE INTEGRATIONS;

-- granting the usage to the sysadmin
grant usage on integration external_table_integration to role sysadmin;

// Get aws_iam_ueser_arn and update it in  S3 
desc integration external_table_integration; 
    
 -- creating a stage for the S3
create or replace stage stage_external_table
    url = 's3://s-3-buck-et/csv_folder/'
    storage_integration = external_table_integration
    file_format = csv_ff;

-- list the files in the S3 bucket
list @stage_external_table;

-- create an external table in a simple way   -- 1st method 
create or replace external table user_email_ext
with 
location = @stage_external_table  -- /01_sample_user_email.csv
pattern = '.*user.*'
file_format = csv_ff ; 

select * from user_email_ext;

--creating another table to get data in tabular format

create or replace external table user_external (
      id number as (value:c1::number),
      first_name varchar as (value:c2::varchar),
      last_name varchar as (value:c3::varchar),
      email varchar as (value:c4::varchar),
      gender varchar as (value:c5::varchar),
      aboutme varchar as (value:c6::varchar) 
)
with 
location = @stage_external_table
pattern = '.*user.*'
file_format = csv_ff ;

select * from user_external;

----------------------------------------------------
-- run queries for analysis
select * from user_external where gender = 'M';
select * from user_external where email like '%@w3.org';

-- to see the external tables 
desc external table user_external;

show external tables;

-- to see the files it is referring to 
select distinct metadata$filename from user_external;

----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
--                                  External tables using Internal stages (Local Machine)

-- It is not possible to create an external table on the internal stage 


-- Create file format object
CREATE OR REPLACE FILE FORMAT csv_ff
    type = csv
    field_delimiter = ','
    skip_header = 1
    empty_field_as_null = TRUE;
    
-- create a stage
create or replace stage int_stage
file_format = csv_ff;

-- list a stage
list @int_stage;

-- uploading to int stage

-- use the command prompt and connect to Snowflake using
-- snowsql -a <account_name> -u <user_name> and enter password
-- select db and schema, load the file into the stage
-- using PUT file://path @int_stage;

-- list a stage
list @int_stage;

--creating another table to get data in tabular format in the internal stage

create or replace external table user_external (
      id number as (value:c1::number),
      first_name varchar as (value:c2::varchar),
      last_name varchar as (value:c3::varchar),
      email varchar as (value:c4::varchar),
      gender varchar as (value:c5::varchar),
      aboutme varchar as (value:c6::varchar) 
)
with 
location = @int_stage/01_sample_user_email.csv.gz
file_format = csv_ff ;


-- NOTE: WE CAN NOT CREATE an external table on the internal stage
